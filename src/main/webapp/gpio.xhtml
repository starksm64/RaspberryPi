<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns:h="http://java.sun.com/jsf/html"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:rich="http://richfaces.org/rich">
<ui:composition template="template/main.xhtml">
    <ui:define name="title">
        <title>Tutorial on the Raspberry Pi&reg; GPIO Pins</title>
    </ui:define>
    <ui:define name="content">
        <h1>Background</h1>
        <p>The GPIO pins on a Raspberry Pi are a great way to interface physical devices like buttons and LEDs with the little Linux processor. In these tutorials, we will be wiring up LEDs to the GPIO pins. In the wiring diagrams shown, note that a LED has one leg that is longer
	        than the other(the anode+), and the wiring of the legs must match that of the diagram to avoid burning out the LED.
        </p>
        <h1>pilab.ControlGpioExample</h1>
        Taken from: <a href="http://pi4j.com/example/control.html">Simple GPIO Control using Pi4J</a>
        <h2>Wiring Diagram</h2>
        The following diagram shows wiring the GPIO 1 pin to a LED anode with a resistor in between, and GND to the cathode. The Pi board labels P1, so P12 which is GPIO 1 is the 6th pin on the outside edge of the header.
        <img src="images/gpio-control-example.png" /><br/>
        Once you have your Pi wired as shown, run the pilab.ControlGpioExample as follows, and you should see the LED flash on/off as indicated by the terminal output:
<pre>
[jbosspi@raspi RaspberryPi]$ sudo ~/apache-ant-1.9.3/bin/ant ControlGpioExample
Buildfile: /home/jbosspi/RaspberryPi/build.xml

ControlGpioExample:
     [java] <--Pi4J--> GPIO Control Example ... started.
wiringPiSetup: mmap failed: No such file or directory
     [java] --> GPIO state should be: ON
     [java] --> GPIO state should be: OFF
     [java] --> GPIO state should be: ON
     [java] --> GPIO state should be: OFF
     [java] --> GPIO state should be: ON for only 1 second

BUILD SUCCESSFUL
Total time: 38 seconds
</pre>
		<p>The source for the pilab.ControlGpioExample program is src/test/java/pilab/ControlGpioExample.java</p>
        <h1>pilab.ListenGpioExample</h1>
        Taken from: <a href="http://pi4j.com/example/listener.html">GPIO State Listener Example using Pi4J</a>
        <p>The following example demonstrates how to setup a listener for GPIO pin state changes on the Raspberry Pi. This listener implementation is far more efficient than constantly polling and querying for the the GPIO pin state. The listener implementation is based on GPIO hardware interrupts not state polling.</p>
        <h2>Wiring Diagram</h2>
        <p>The following wiring diagram hows <img src="images/gpio-listener-example.png" /></p>
        <h1>pilab.TriggerGpioExample</h1>
        Taken from: <a href="http://pi4j.com/example/trigger.html">GPIO Triggers Example using Pi4J</a>
    </ui:define>
</ui:composition>
</html>
